services:
  db:
    image: postgres:${PG_VERSION:-16}
    container_name: cosmosindexer
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 10
    environment:
      # Official postgres envs used by the image during init:
      # POSTGRES_DB / POSTGRES_USER / POSTGRES_PASSWORD are REQUIRED to create the DB and user.
      # POSTGRES_INITDB_ARGS is optional (e.g. "--locale=C --encoding=UTF8").
      POSTGRES_DB: ${PG_DB}
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
      POSTGRES_INITDB_ARGS: ${PG_INITDB_ARGS}
    ports:
      - "${PG_PORT:-5432}:5432"
    volumes:
      - pgdata_cosmosindexer:/var/lib/postgresql/data

  indexer:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: cosmos-indexer-app
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      # Ensure the indexer writes to Postgres and will try to resume from progress
      SINK: postgres
      RESUME: 'true'
      PG_HOST: ${PG_HOST:-db}
      # use container internal Postgres port (5432) for inter-container networking
      PG_PORT: 5432
      PG_USER: ${PG_USER}
      PG_PASSWORD: ${PG_PASSWORD}
      PG_DB: ${PG_DB}
      # Optional: override RPC_URL if you want the indexer to target a remote node
      RPC_URL: ${RPC_URL}
      # Node memory default (can be overridden at compose run time)
      NODE_OPTIONS: ${NODE_OPTIONS:---max-old-space-size=24576}
    # In production, do not bind-mount the host project directory â€” that can overwrite
    # container-installed node_modules (causing esbuild platform mismatch). The image
    # already contains the app and dependencies.
    # For development you can create a separate docker-compose.override.dev.yml that
    # mounts the source and sets up an anonymous volume for /usr/src/app/node_modules.
    working_dir: /usr/src/app


volumes:
  pgdata_cosmosindexer: